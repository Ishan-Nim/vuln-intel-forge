
import { EnrichedVulnerability } from '@/types/vulnerability';
import { cleanContent } from '@/lib/utils';

// Helper function to preprocess vulnerability data
export const preprocessVulnerabilities = (vulnerabilities: EnrichedVulnerability[]): EnrichedVulnerability[] => {
  return vulnerabilities.map(vulnerability => {
    // Create clean copies of the vulnerability to avoid modifying the original data
    return {
      ...vulnerability,
      description: cleanContent(vulnerability.description),
      technicalAnalysis: cleanContent(vulnerability.technicalAnalysis),
      businessImpact: cleanContent(vulnerability.businessImpact),
      knownExploits: cleanContent(vulnerability.knownExploits),
      mitigationStrategies: cleanContent(vulnerability.mitigationStrategies)
    };
  });
};

// Filter vulnerabilities based on search query and selected severity
export const filterVulnerabilities = (
  vulnerabilities: EnrichedVulnerability[],
  searchQuery: string,
  selectedSeverity: string
): EnrichedVulnerability[] => {
  return vulnerabilities.filter(vulnerability => {
    // Filter by search query
    const matchesSearch = searchQuery ? 
      vulnerability.title.toLowerCase().includes(searchQuery.toLowerCase()) || 
      vulnerability.description.toLowerCase().includes(searchQuery.toLowerCase()) || 
      vulnerability.cveId.toLowerCase().includes(searchQuery.toLowerCase()) : true;

    // Filter by severity
    const matchesSeverity = selectedSeverity === 'all' || vulnerability.severityLevel === selectedSeverity;
    return matchesSearch && matchesSeverity;
  });
};
