
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import VulnerabilityCard from '@/components/VulnerabilityCard';
import VulnerabilityDetail from '@/components/VulnerabilityDetail';
import SearchAndFilter from '@/components/SearchAndFilter';
import { EnrichedVulnerability } from '@/types/vulnerability';
import { getEnrichedVulnerabilities } from '@/lib/api';
import { ThemeToggle } from '@/components/ThemeToggle';
import { toast } from 'sonner';
import { 
  Pagination, 
  PaginationContent, 
  PaginationItem, 
  PaginationLink, 
  PaginationNext, 
  PaginationPrevious 
} from '@/components/ui/pagination';
import { ChevronLeft, ChevronRight } from 'lucide-react';

const VulnerabilityDatabase = () => {
  const [vulnerabilities, setVulnerabilities] = useState<EnrichedVulnerability[]>([]);
  const [selectedVulnerability, setSelectedVulnerability] = useState<EnrichedVulnerability | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedSeverity, setSelectedSeverity] = useState('all');
  const [loading, setLoading] = useState(true);
  
  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 12;

  // Fetch vulnerability data on component mount
  useEffect(() => {
    const loadVulnerabilities = async () => {
      setLoading(true);
      try {
        const data = await getEnrichedVulnerabilities();
        setVulnerabilities(data);
        
        // Show a count of loaded vulnerabilities
        if (data.length > 0) {
          toast.info(`${data.length} vulnerabilities loaded from database`);
        }
      } catch (error) {
        console.error('Error loading vulnerabilities:', error);
        toast.error('Failed to load vulnerability data');
      } finally {
        setLoading(false);
      }
    };

    loadVulnerabilities();
  }, []);

  // Filter vulnerabilities based on search query and selected severity
  const filteredVulnerabilities = vulnerabilities.filter(vulnerability => {
    // Filter by search query
    const matchesSearch = searchQuery
      ? vulnerability.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        vulnerability.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
        vulnerability.cveId.toLowerCase().includes(searchQuery.toLowerCase())
      : true;

    // Filter by severity
    const matchesSeverity = selectedSeverity === 'all' || vulnerability.severityLevel === selectedSeverity;

    return matchesSearch && matchesSeverity;
  });

  // Calculate pagination
  const totalItems = filteredVulnerabilities.length;
  const totalPages = Math.ceil(totalItems / itemsPerPage);
  
  // Get current items for the page
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = filteredVulnerabilities.slice(indexOfFirstItem, indexOfLastItem);
  
  // Page change handlers
  const handleNextPage = () => {
    if (currentPage < totalPages) {
      setCurrentPage(currentPage + 1);
      // Scroll to top when changing pages
      window.scrollTo(0, 0);
    }
  };
  
  const handlePreviousPage = () => {
    if (currentPage > 1) {
      setCurrentPage(currentPage - 1);
      // Scroll to top when changing pages
      window.scrollTo(0, 0);
    }
  };

  // Generate page numbers to show
  const getPageNumbers = () => {
    let pages = [];
    
    // Always show first page
    if (totalPages > 0) {
      pages.push(1);
    }
    
    // Calculate range of page numbers to show around the current page
    let startPage = Math.max(2, currentPage - 1);
    let endPage = Math.min(totalPages - 1, currentPage + 1);
    
    // Add ellipsis after first page if needed
    if (startPage > 2) {
      pages.push('ellipsis1');
    }
    
    // Add page numbers
    for (let i = startPage; i <= endPage; i++) {
      pages.push(i);
    }
    
    // Add ellipsis before last page if needed
    if (endPage < totalPages - 1 && totalPages > 1) {
      pages.push('ellipsis2');
    }
    
    // Always show last page if there is more than one page
    if (totalPages > 1) {
      pages.push(totalPages);
    }
    
    return pages;
  };

  return (
    <div className="flex-1">
      <main className="container mx-auto p-4">
        <section className="mb-6">
          <SearchAndFilter
            searchQuery={searchQuery}
            setSearchQuery={setSearchQuery}
            selectedSeverity={selectedSeverity}
            setSelectedSeverity={setSelectedSeverity}
          />
        </section>

        <section>
          {loading ? (
            <div className="flex flex-col items-center justify-center p-12">
              <div className="h-10 w-10 rounded-full border-4 border-primary border-t-transparent animate-spin"></div>
              <p className="mt-4 text-sm text-muted-foreground">Loading vulnerabilities from Supabase...</p>
            </div>
          ) : currentItems.length > 0 ? (
            <>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {currentItems.map(vulnerability => (
                  <VulnerabilityCard
                    key={vulnerability.id}
                    vulnerability={vulnerability}
                    onSelect={(vuln) => setSelectedVulnerability(vuln)}
                  />
                ))}
              </div>
              
              {/* Pagination */}
              {totalPages > 1 && (
                <div className="mt-8">
                  <Pagination>
                    <PaginationContent>
                      <PaginationItem>
                        <PaginationPrevious 
                          onClick={handlePreviousPage}
                          className={currentPage === 1 ? "pointer-events-none opacity-50" : "cursor-pointer"}
                        />
                      </PaginationItem>
                      
                      {getPageNumbers().map((page, index) => (
                        <PaginationItem key={index}>
                          {page === 'ellipsis1' || page === 'ellipsis2' ? (
                            <span className="flex h-9 w-9 items-center justify-center">...</span>
                          ) : (
                            <PaginationLink
                              isActive={page === currentPage}
                              onClick={() => {
                                if (typeof page === 'number') {
                                  setCurrentPage(page);
                                  window.scrollTo(0, 0);
                                }
                              }}
                              className="cursor-pointer"
                            >
                              {page}
                            </PaginationLink>
                          )}
                        </PaginationItem>
                      ))}
                      
                      <PaginationItem>
                        <PaginationNext 
                          onClick={handleNextPage} 
                          className={currentPage === totalPages ? "pointer-events-none opacity-50" : "cursor-pointer"}
                        />
                      </PaginationItem>
                    </PaginationContent>
                  </Pagination>
                </div>
              )}
            </>
          ) : (
            <div className="text-center p-12 bg-card rounded-lg">
              <h3 className="text-lg font-semibold mb-2">No vulnerabilities found</h3>
              {searchQuery || selectedSeverity !== 'all' ? (
                <p className="text-muted-foreground">Try adjusting your search or filter criteria</p>
              ) : (
                <div className="space-y-4">
                  <p className="text-muted-foreground">Visit the Admin Dashboard to fetch and process new vulnerabilities</p>
                  <Button asChild>
                    <Link to="/admin">Go to Admin Dashboard</Link>
                  </Button>
                </div>
              )}
            </div>
          )}
        </section>

        {selectedVulnerability && (
          <VulnerabilityDetail 
            vulnerability={selectedVulnerability} 
            onClose={() => setSelectedVulnerability(null)} 
          />
        )}
      </main>
    </div>
  );
};

export default VulnerabilityDatabase;
