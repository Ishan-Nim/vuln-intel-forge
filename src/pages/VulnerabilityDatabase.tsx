
import React, { useState, useEffect } from 'react';
import { toast } from 'sonner';
import { getEnrichedVulnerabilities } from '@/lib/api';
import { EnrichedVulnerability } from '@/types/vulnerability';
import SearchAndFilter from '@/components/SearchAndFilter';
import VulnerabilityDetail from '@/components/VulnerabilityDetail';
import DatabaseStatsBanner from '@/components/vulnerability/DatabaseStatsBanner';
import VulnerabilityGrid from '@/components/vulnerability/VulnerabilityGrid';
import VulnerabilityPagination from '@/components/vulnerability/VulnerabilityPagination';
import EmptyState from '@/components/vulnerability/EmptyState';
import LoadingState from '@/components/vulnerability/LoadingState';
import { filterVulnerabilities, preprocessVulnerabilities } from '@/utils/vulnerability-utils';

const VulnerabilityDatabase = () => {
  const [vulnerabilities, setVulnerabilities] = useState<EnrichedVulnerability[]>([]);
  const [selectedVulnerability, setSelectedVulnerability] = useState<EnrichedVulnerability | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedSeverity, setSelectedSeverity] = useState('all');
  const [loading, setLoading] = useState(true);

  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 12;

  // Fetch vulnerability data on component mount
  useEffect(() => {
    const loadVulnerabilities = async () => {
      setLoading(true);
      try {
        const data = await getEnrichedVulnerabilities();
        // Preprocess the vulnerabilities before setting them
        const processedData = preprocessVulnerabilities(data);
        setVulnerabilities(processedData);

        // Show a count of loaded vulnerabilities
        if (processedData.length > 0) {
          toast.info(`${processedData.length} vulnerabilities loaded from database`);
        }
      } catch (error) {
        console.error('Error loading vulnerabilities:', error);
        toast.error('Failed to load vulnerability data');
      } finally {
        setLoading(false);
      }
    };
    loadVulnerabilities();
  }, []);

  // Filter vulnerabilities based on search query and selected severity
  const filteredVulnerabilities = filterVulnerabilities(vulnerabilities, searchQuery, selectedSeverity);

  // Calculate pagination
  const totalItems = filteredVulnerabilities.length;
  const totalPages = Math.ceil(totalItems / itemsPerPage);

  // Get current items for the page
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = filteredVulnerabilities.slice(indexOfFirstItem, indexOfLastItem);

  // Handle page change
  const handlePageChange = (page: number) => {
    setCurrentPage(page);
    // Scroll to top when changing pages
    window.scrollTo(0, 0);
  };

  return (
    <div className="flex-1">
      <main className="container mx-auto p-4">
        <section className="mb-6">
          {/* Database stats banner */}
          <DatabaseStatsBanner 
            totalVulnerabilities={vulnerabilities.length}
            filteredCount={totalItems}
            currentPageCount={currentItems.length}
          />

          <SearchAndFilter 
            searchQuery={searchQuery} 
            setSearchQuery={setSearchQuery} 
            selectedSeverity={selectedSeverity} 
            setSelectedSeverity={setSelectedSeverity} 
          />
        </section>

        <section>
          {loading ? (
            <LoadingState />
          ) : currentItems.length > 0 ? (
            <>
              <VulnerabilityGrid 
                vulnerabilities={currentItems} 
                onSelect={vuln => setSelectedVulnerability(vuln)} 
              />
              
              {/* Pagination */}
              {totalPages > 1 && (
                <VulnerabilityPagination 
                  currentPage={currentPage}
                  totalPages={totalPages}
                  onPageChange={handlePageChange}
                />
              )}
            </>
          ) : (
            <EmptyState hasFilters={searchQuery !== '' || selectedSeverity !== 'all'} />
          )}
        </section>

        {selectedVulnerability && (
          <VulnerabilityDetail 
            vulnerability={selectedVulnerability} 
            onClose={() => setSelectedVulnerability(null)} 
          />
        )}
      </main>
    </div>
  );
};

export default VulnerabilityDatabase;
