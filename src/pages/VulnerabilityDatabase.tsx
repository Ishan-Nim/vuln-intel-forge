
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import VulnerabilityCard from '@/components/VulnerabilityCard';
import VulnerabilityDetail from '@/components/VulnerabilityDetail';
import SearchAndFilter from '@/components/SearchAndFilter';
import { EnrichedVulnerability } from '@/types/vulnerability';
import { getEnrichedVulnerabilities } from '@/lib/api';
import { ThemeToggle } from '@/components/ThemeToggle';

const VulnerabilityDatabase = () => {
  const [vulnerabilities, setVulnerabilities] = useState<EnrichedVulnerability[]>([]);
  const [selectedVulnerability, setSelectedVulnerability] = useState<EnrichedVulnerability | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedSeverity, setSelectedSeverity] = useState('all');
  const [loading, setLoading] = useState(true);

  // Fetch vulnerability data on component mount
  useEffect(() => {
    const loadVulnerabilities = () => {
      setLoading(true);
      try {
        const data = getEnrichedVulnerabilities();
        setVulnerabilities(data);
      } catch (error) {
        console.error('Error loading vulnerabilities:', error);
      } finally {
        setLoading(false);
      }
    };

    loadVulnerabilities();
  }, []);

  // Filter vulnerabilities based on search query and selected severity
  const filteredVulnerabilities = vulnerabilities.filter(vulnerability => {
    // Filter by search query
    const matchesSearch = searchQuery
      ? vulnerability.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        vulnerability.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
        vulnerability.cveId.toLowerCase().includes(searchQuery.toLowerCase())
      : true;

    // Filter by severity
    const matchesSeverity = selectedSeverity === 'all' || vulnerability.severityLevel === selectedSeverity;

    return matchesSearch && matchesSeverity;
  });

  return (
    <div className="flex-1">
      <main className="container mx-auto p-4">
        <section className="mb-6">
          <SearchAndFilter
            searchQuery={searchQuery}
            setSearchQuery={setSearchQuery}
            selectedSeverity={selectedSeverity}
            setSelectedSeverity={setSelectedSeverity}
          />
        </section>

        <section>
          {loading ? (
            <div className="flex flex-col items-center justify-center p-12">
              <div className="h-10 w-10 rounded-full border-4 border-primary border-t-transparent animate-spin"></div>
              <p className="mt-4 text-sm text-muted-foreground">Loading vulnerabilities...</p>
            </div>
          ) : filteredVulnerabilities.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredVulnerabilities.map(vulnerability => (
                <VulnerabilityCard
                  key={vulnerability.id}
                  vulnerability={vulnerability}
                  onSelect={(vuln) => setSelectedVulnerability(vuln)}
                />
              ))}
            </div>
          ) : (
            <div className="text-center p-12 bg-card rounded-lg">
              <h3 className="text-lg font-semibold mb-2">No vulnerabilities found</h3>
              {searchQuery || selectedSeverity !== 'all' ? (
                <p className="text-muted-foreground">Try adjusting your search or filter criteria</p>
              ) : (
                <p className="text-muted-foreground">Visit the Admin Dashboard to fetch and process new vulnerabilities</p>
              )}
            </div>
          )}
        </section>

        {selectedVulnerability && (
          <VulnerabilityDetail 
            vulnerability={selectedVulnerability} 
            onClose={() => setSelectedVulnerability(null)} 
          />
        )}
      </main>
    </div>
  );
};

export default VulnerabilityDatabase;
